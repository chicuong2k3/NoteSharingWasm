@page "/post/create"


@inject ISnackbar snackbar
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@inject ITagService tagService
@inject IPostService postService


<AuthorizeView Context="UserContext">
    <Authorized>
        <MudTabs Rounded="true" Elevation="0" Outlined="true"
                 Centered="true" Ripple="false"
                 SliderColor="Color.Primary" SliderAnimation="true"
                 PanelClass="pa-6">
            <MudTabPanel Text="Tạo thủ công">
                <EditForm Model="@Model" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />

                    <MudStack>
                        <MudInputLabel Style="font-weight: 600">Tiêu đề</MudInputLabel>
                        <MudTextField Margin="Margin.Dense"
                                      Variant="Variant.Outlined" @bind-Value="@Model.Title"
                                      For="@(() => Model.Title)"></MudTextField>
                    </MudStack>

                    <MudStack Class="mt-4">
                        <MudInputLabel Style="font-weight: 600">Chọn các tags</MudInputLabel>

                        <MudSelect T="Guid" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                                   CheckedIcon="@Icons.Material.Filled.Star"
                                   UncheckedIcon="@Icons.Material.Filled.StarBorder"
                                   Variant="Variant.Outlined" Margin="Margin.Dense"
                                   MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
                                   MultiSelection="true" SelectedValuesChanged="OnSelectedTagsChanged">
                            @foreach (var tag in _tags)
                            {
                                <MudSelectItem T="Guid" Value="@tag.Id" Ripple="false">
                                    @tag.Name
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudStack>


                    <MudStack Class="mt-4">
                        <MudInputLabel Style="font-weight: 600">Nội dung</MudInputLabel>

                        <MarkdownEditor @bind-Value="@Model.Content"
                                        AllowResize="false" AutoSaveEnabled="true"
                                        LineWrapping="true" LineNumbers="true" ToolbarTips="true"
                                        MinHeight="500px" MaxHeight="500px"
                                        UploadImage="true"
                                        HideIcons="@(["fullscreen"])" />

                        <ValidationMessage class="mud-input-helper-text mud-input-error" style="font-size: 0.75rem;" For="() => Model.Content" />
                    </MudStack>



                    @if (!_isSubmitting)
                    {
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" FullWidth="true"
                                   Class="mt-3 rounded-pill" Ripple="false" DropShadow="false">
                            Lưu bài viết
                        </MudButton>
                    }
                    else
                    {
                        <MudProgressCircular Color="Color.Success" Size="Size.Small" Class="mt-3" />
                    }
                </EditForm>
            </MudTabPanel>
            <MudTabPanel Text="Tạo hàng loạt">
                <MudGrid>
                    <MudItem md="8">
                        <MudStack Style="width: 100%" Spacing="0">
                            <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".md"
                                           @bind-Value="_files"
                                           OnFilesChanged="OnInputFileChanged"
                                           AppendMultipleFiles
                                           Hidden="@false"
                                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                                           InputStyle="opacity:0"
                                           @ondrop="@ClearDragClass"
                                           @ondragenter="@SetDragClass"
                                           @ondragleave="@ClearDragClass"
                                           @ondragend="@ClearDragClass">
                                <ActivatorContent>
                                    <MudPaper Height="300px"
                                              Outlined="true" Style="overflow-y: auto;"
                                              Class="@_dragClass">
                                        <MudText Typo="Typo.h6" Align="Align.Center">
                                            Kéo thả file markdown vào đây hoặc nhấn vào để chọn file
                                        </MudText>
                                        @foreach (var file in _fileNames)
                                        {
                                            <MudChip T="string" Size="Size.Small"
                                                     Color="Color.Default"
                                                     Text="@file" />
                                        }
                                    </MudPaper>
                                </ActivatorContent>
                            </MudFileUpload>

                            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">

                                <MudText Typo="Typo.subtitle2" Color="Color.Info">
                                    @if (!string.IsNullOrEmpty(_uploadSuccessMessage))
                                    {
                                        @_uploadSuccessMessage

                                    }
                                </MudText>
                                <MudToolBar Gutters="@false"
                                            Class="relative d-flex justify-end gap-4">



                                    <MudButton Color="Color.Success" Class="rounded-pill"
                                               Size="Size.Small" Ripple="false" DropShadow="false"
                                               Disabled="@(!_fileNames.Any())"
                                               OnClick="@Upload"
                                               Variant="Variant.Filled">
                                        Tạo bài viết
                                    </MudButton>
                                    <MudButton Color="Color.Error" Class="rounded-pill"
                                               Size="Size.Small" Ripple="false" DropShadow="false"
                                               Disabled="@(!_fileNames.Any())"
                                               OnClick="@ClearAsync"
                                               Variant="Variant.Filled">
                                        Xoá tất cả
                                    </MudButton>
                                </MudToolBar>
                            </MudStack>
                        </MudStack>
                    </MudItem>

                    <MudItem md="4">
                        @if (_isUploading)
                        {
                            <MudStack Justify="Justify.Center">
                                <MudPaper Outlined="true" Elevation="0" Height="300px" Class="mt-4 pa-4 rounded-lg border-2">
                                    <MudProgressLinear Color="Color.Success" Min="0" Max="@_initialCount" Value="@_createdFiles.Count" Class="my-1" />

                                    <MudPaper Elevation="0" Height="250px" Style="overflow-y: auto;">
                                        @foreach (var createdFile in _createdFiles)
                                        {
                                            if (createdFile.Item2)
                                            {
                                                <MudText Typo="Typo.subtitle2" Color="Color.Success">
                                                    @createdFile.Item1 đã được tạo thành công.
                                                </MudText>
                                            }
                                            else
                                            {
                                                <MudText Typo="Typo.subtitle2" Color="Color.Error">
                                                    @createdFile.Item1 tải lên thất bại.
                                                </MudText>
                                            }
                                        }
                                    </MudPaper>

                                </MudPaper>
                            </MudStack>
                        }
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
        </MudTabs>
    </Authorized>
    <NotAuthorized>
        <AccessDenied />
    </NotAuthorized>
</AuthorizeView>

@code {
    CreatePostRequest Model = new();

    List<TagResponse> _tags = [];

    bool _isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        _tags = (await tagService.GetTagsAsync()).OrderBy(tag => tag.Name).ToList();
    }

    #region Manual create post
    private string GetMultiSelectionText(List<string> selectedValues)
    {
        var selectedTags = _tags.Where(x => selectedValues.Contains(x.Id.ToString()));

        var count = selectedValues.Count;

        if (count == 0) return "Chưa có tag nào được chọn";

        return $"Có {count} tag được chọn: {string.Join(", ", selectedTags.Select(x => x.Name))}";
    }

    private void OnSelectedTagsChanged(IEnumerable<Guid> tagIds)
    {
        Model.TagIds = tagIds.ToList();
    }

    private async Task HandleValidSubmit(EditContext editContext)
    {
        _isSubmitting = true;

        var createdPost = await postService.CreatePostAsync(Model);

        if (createdPost != null)
        {
            snackbar.Add("Tạo bài viết thành công.", Severity.Success);

            navigationManager.NavigateTo($"/post/{createdPost.PostId}");
        }
        else
        {
            snackbar.Add("Có lỗi xảy ra.", Severity.Error);
        }

        _isSubmitting = false;
    }

    #endregion


    #region Upload multiple files
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private readonly List<string> _fileNames = new();
    private List<IBrowserFile> _files = new List<IBrowserFile>();
    private int _initialCount = 0;
    private string _uploadSuccessMessage = string.Empty;

    bool _isUploading = false;
    List<(string, bool)> _createdFiles = new();


    private void ClearAsync()
    {
        _files?.Clear();
        _fileNames.Clear();
        ClearDragClass();
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        _isUploading = false;
        _uploadSuccessMessage = string.Empty;
        _createdFiles.Clear();

        ClearDragClass();
        var files = e.GetMultipleFiles();

        const long maxFileSize = 10485760;  // 10 MB in bytes
        _files.Clear();
        _fileNames.Clear();

        foreach (var file in files)
        {
            if (file.Size > maxFileSize)
            {
                snackbar.Add($"File {file.Name} quá lớn. Chỉ tải lên file tối đa 10MB.", Severity.Error);
            }
            else
            {
                if (!_fileNames.Contains(file.Name))
                {
                    _files.Add(file);
                    _fileNames.Add(file.Name);
                }
            }
        }

        _initialCount = _fileNames.Count;
    }

    private async Task Upload()
    {
        if (_files == null || !_files.Any())
        {
            snackbar.Add("Không có file nào được chọn.", Severity.Error);
            return;
        }

        if (_fileNames.Exists(x => Path.GetExtension(x) != ".md"))
        {
            _fileNames.Clear();
            _files.Clear();
            snackbar.Add("Chỉ chấp nhận file có định dạng .md", Severity.Error);
            return;
        }

        _isUploading = true;

        foreach (var file in _files)
        {
            using var stream = file.OpenReadStream();
            using var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();

            var name = Path.GetFileNameWithoutExtension(file.Name);

            var result = await postService.CreatePostAsync(
                new CreatePostRequest()
                    {
                        Content = content,
                        Title = name,
                        TagIds = new List<Guid>()
                    }
            );


            await Task.Delay(1000);


            if (result != null)
            {
                _createdFiles.Add((result.Title, true));
            }
            else
            {
                _createdFiles.Add((file.Name, false));
            }

            _fileNames.Remove(file.Name);

            StateHasChanged();
        }

        _files.Clear();

        _uploadSuccessMessage = $"Đã tạo thành công {_createdFiles.Count(x => x.Item2)} bài viết.";
    }

    #endregion

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;





}
