@page "/reset-password"
@inject ISnackbar snackbar
@inject NavigationManager navigationManager
@inject IUserService userService

<MudText Typo="Typo.h6" Align="Align.Center">Đổi mật khẩu</MudText>

<MudPaper Outlined="true" Elevation="0" Class="pa-4">
    <EditForm EditContext="_editContext" OnValidSubmit="Submit">
        <DataAnnotationsValidator />
        <MudTextField InputType="InputType.Hidden" Class="d-none" Value="@Email" />

        <MudTextField Immediate="false" ShrinkLabel="true"
                      InputType="InputType.Text" Placeholder="Điền mã OTP (gồm 6 ký tự)"
                      For="@(() => Model.Otp)" @bind-Value="@Model.Otp"
                      Variant="Variant.Outlined" Margin="Margin.Dense" />

        <MudTextField Immediate="false" ShrinkLabel="true"
                      InputType="InputType.Password" Placeholder="Điền mật khẩu mới"
                      For="@(() => Model.NewPassword)" @bind-Value="@Model.NewPassword"
                      Variant="Variant.Outlined" Margin="Margin.Dense"
                      Class="mt-4" />

        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" FullWidth="true"
                   Class="mt-3 rounded-pill" DropShadow="false">
            Xác nhận đổi mật khẩu
        </MudButton>
    </EditForm>
</MudPaper>

@code {
    private ForgotPasswordModel Model { get; set; } = new();
    private EditContext? _editContext;
    private ValidationMessageStore? _validationMessageStore;

    [SupplyParameterFromQuery]

    public string Email { get; set; }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Model);
        _validationMessageStore = new ValidationMessageStore(_editContext);

        _editContext.OnFieldChanged += (sender, args) =>
        {
            if (_validationMessageStore != null)
            {
                _validationMessageStore.Clear(args.FieldIdentifier);
                _editContext.NotifyValidationStateChanged();
            }
        };
    }

    private async Task Submit()
    {
        if (_validationMessageStore == null || _editContext == null)
        {
            return;
        }

        _validationMessageStore.Clear();

        var resetPasswordResult = await userService.ResetPassword(Email, Model.Otp, Model.NewPassword);

        if (!resetPasswordResult.IsSuccessStatusCode)
        {
            _validationMessageStore.Add(() => Model.Otp, new[] { "Mã OTP không chính xác." });
            _editContext.NotifyValidationStateChanged();
            return;
        }

        snackbar.Add("Mật khẩu đã được thay đổi thành công.", Severity.Success);

        navigationManager.NavigateTo("/login");
    }

    public class ForgotPasswordModel
    {
        [Required(ErrorMessage = "Không được để trống.")]
        [Label("Mã OTP")]
        public string Otp { get; set; } = string.Empty;

        [Required(ErrorMessage = "Không được để trống.")]
        [Label("Mật khẩu mới")]
        [MinLength(6, ErrorMessage = "Mật khẩu phải có ít nhất 6 ký tự.")]
        public string NewPassword { get; set; } = string.Empty;
    }
}
