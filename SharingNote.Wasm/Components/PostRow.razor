@using System.Security.Claims
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@inject IPostService postService
@inject IUserService userService
@inject AuthorizationService authorizationService

@if (Post != null)
{
    <div class="post-row" onclick="@(() => navigationManager.NavigateTo($"/post/{Post.Id}"))">
        <MudPaper Outlined="true" Class="px-5 py-2">
            <MudStack Spacing="1">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Row="true">

                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                        @if (_author != null)
                        {
                            <MudAvatar Size="Size.Small">
                                <MudImage Src="@_author?.Avatar" />
                            </MudAvatar>
                            <MudText Typo="Typo.caption">@_author.DisplayName</MudText>
                        }
                        <MudText Typo="Typo.overline">@Post.PublicationDate.ToShortDateString()</MudText>
                    </MudStack>

                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="0">
                        @if (_canManagePost)
                        {
                            <MudIconButton Color="Color.Error"
                                           Icon="@Icons.Material.Filled.Close"
                                           Size="Size.Small"
                                           OnClick="OpenDeletePostDialog" />
                        }
                    </MudStack>

                </MudStack>
                <div class="post-title">
                    <MudLink Underline="Underline.None">@Post.Title</MudLink>
                </div>

                <MudStack Row="true" Spacing="0">
                    @foreach (var tag in Post.Tags)
                    {
                        <span class="post-tag">
                            <MudChip T=string Color="Color.Success" Size="Size.Small">@tag.Name</MudChip>
                        </span>
                    }
                </MudStack>
            </MudStack>
        </MudPaper>
    </div>
}


@code {
    [Parameter]
    public PostDto? Post { get; set; }

    [Parameter]
    public EventCallback OnPostDeleted { get; set; }

    GetUserResponse? _author;
    private bool _canManagePost;


    ClaimsPrincipal? _user;
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _user = (await AuthenticationStateTask).User;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Post != null)
        {
            _author = await userService.GetUserByIdAsync(Post.UserId);
            _canManagePost = _user != null &&
            await authorizationService.IsAuthorizedToManagePost(_user, Post.Id);
        }
    }

    private async Task OpenDeletePostDialog()
    {
        var dialogOptions = new DialogOptions()
            {
                FullWidth = true
            };

        var parameters = new DialogParameters<DeletePostDialog>
        {
            { "Post", Post }
        };

        var dialog = await dialogService.ShowAsync<DeletePostDialog>("Xoá bài viết", parameters, dialogOptions);

        var result = await dialog.Result;

        if (result != null && !result.Canceled && Post != null)
        {
            await OnPostDeleted.InvokeAsync(Post.Id);
        }
    }
}
