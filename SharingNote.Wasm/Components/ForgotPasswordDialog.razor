@inject ISnackbar snackbar
@inject IUserService userService

@inject NavigationManager navigationManager

<EditForm EditContext="@_editContext" OnValidSubmit="Submit">
    <MudDialog>
        <DialogContent>
            <DataAnnotationsValidator />
            <MudTextField ShrinkLabel="true"
                          InputType="InputType.Email" Placeholder="Điền địa chỉ email tài khoản của bạn"
                          For="@(() => _model.Email)" @bind-Value="@_model.Email"
                          Variant="Variant.Outlined" Margin="Margin.Dense" />
        </DialogContent>
        <DialogActions>
            @if (_isSubmitting)
            {
                <MudProgressCircular Indeterminate="true" Class="ml-4 mr-4"
                                     Color="Color.Primary" Size="Size.Small" />
            }
            else
            {
                <MudButton Color="Color.Default" OnClick="Cancel">Thoát</MudButton>
                <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">Gửi mã OTP</MudButton>
            }
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }

    private bool _isSubmitting = false;
    private EmailSendModel _model = new();
    private EditContext? _editContext;
    private ValidationMessageStore? _validationMessageStore;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_model);
        _validationMessageStore = new ValidationMessageStore(_editContext);

        _editContext.OnFieldChanged += (sender, args) =>
        {
            if (_validationMessageStore != null)
            {
                _validationMessageStore.Clear(args.FieldIdentifier);
                _editContext.NotifyValidationStateChanged();
            }
        };
    }

    private async Task Submit()
    {
        if (_validationMessageStore == null || _editContext == null)
        {
            return;
        }

        _validationMessageStore.Clear();

        _isSubmitting = true;

        var isAccountExist = await userService.CheckUserExistAsync(_model.Email);

        if (!isAccountExist)
        {
            _isSubmitting = false;
            _validationMessageStore.Add(() => _model.Email, new[] { "Email chưa liên kết với tài khoản nào." });
            _editContext.NotifyValidationStateChanged();
            return;
        }

        var sendEmailResponse = await userService.SendResetPasswordOtp(
            _model.Email
        );

        _isSubmitting = false;

        if (sendEmailResponse.IsSuccessStatusCode)
        {
            MudDialog?.Close(DialogResult.Ok(true));
            navigationManager.NavigateTo($"/reset-password?Email={_model.Email}");
        }
        else
        {
            snackbar.Add("Có lỗi xảy ra.", Severity.Error);
            MudDialog?.Close(DialogResult.Cancel());
        }
    }

    private void Cancel() => MudDialog?.Cancel();

    class EmailSendModel
    {
        [Required(ErrorMessage = "Không được để trống.")]
        [EmailAddress(ErrorMessage = "Email không hợp lệ.")]
        public string Email { get; set; } = string.Empty;
    }
}
